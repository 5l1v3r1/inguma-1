#!/usr/bin/python
"""
Module Local Exploits DDBB for Inguma
Copyright (c) 2009 Hugo Teso <hugo.teso@gmail.com>

License is GPL
"""

import urllib, tarfile, os, string
from lib.libexploit import CIngumaModule

name = "localxpl"
brief_description = "A Module to fetch and manage exploits from many sources"
type = "exploit"

globals = ['remotedb', 'tag', 'xplpath', 'searchYear', ]

class CLocalXpl(CIngumaModule):
    """Main class with run, help and summary methods"""

    remotedb = 'milw0rm'
    tag = ''
    port = ''
    xplpath = ''
    searchYear = ''

    # Exploits will be saved on inguma's directory under modules/expoits/
    # unless changed on EXPLOITS_DIR variable
    INGUMA_DIR = os.getcwd()
    EXPLOITS_DIR = INGUMA_DIR + '/modules/exploits/'

    # Local milw0rm exploits directory
    MILW0RM_DIR = EXPLOITS_DIR + 'milw0rm/'
    # Local milw0rm exploits list
    EXPL_LIST = MILW0RM_DIR + 'sploitlist.txt'

    # Local Packetsorm exploits dir
    PACKETSTORM_DIR = EXPLOITS_DIR + 'packetstorm/'
    # YEARS array to list groups of exploits to fetch
    YEARS = ["07", "08"]

    def showHelp(self):
        print 
        print "Inguma's Local Exploit DDBB Help"
        print "--------------------------------"
        print
        print "remotedb                     Database to work with: milw0rm or packetstorm"
        print "fetch                        Download exploits from remotedb"
        if self.remotedb == 'packetstorm':
            print "years                        A space separated list of years to fetch"
            print "                             Example: 'years 06 07 08'"
        if os.path.exists(self.MILW0RM_DIR) and self.remotedb == 'milw0rm':
            print
            print "Manage Milw0rm DDBB commands"
            print "----------------------------"
            print
            print "list                         Shows list of local exploits. VERY VERBOSE"
            print "search                       Search exploits; use the 'tag' variable"
            print "                             Example: to search for windows exploits"
            print "                             'tag Windows'"
            print "rport                        Shows exploits afecting a remote port"
            print "                             Define the port using command 'port 22'"
            print "                             Port must be numeric: 22 intead of SSH"
            print "correlate                    Searches the DDBB for all exploits matching rport"
            print "                             for all the ports of a scaned machine. Specify"
            print "                             target machine with 'target 192.168.0.1'"
            print "                             Be sure to scan the machine before!"
            print "show                         Shows selected exploit source code"
            print "                             Select exploit using xplpath command:"
            print "                             'xplpath path/to/exploit'"
            print
        if os.path.exists(self.PACKETSTORM_DIR) and self.remotedb == 'packetstorm':
            print
            print "Manage Packetstorm DDBB commands"
            print "--------------------------------"
            print
            print "list                         Shows list of local exploits. VERY VERBOSE"
            print "                             Also navigate the exploits listing going with"
            print "                             your browser to, for example:"
            print "                             ", self.PACKETSTORM_DIR + '08-exploits/0801-exploits/index.html'
            print "search                       Search exploits; use the 'tag' variable"
            print "                             Example: to search for windows exploits"
            print "                             Example: 'tag Windows Vista'"
            print "                             Optionaly append a year to search only on exploits of this year"
            print "                             Example: 'year 08'"
            print "show                         Shows selected exploit source code"
            print "                             Select exploit using xplpath command:"
            print "                             'xplpath path/to/exploit'"
            print
        print "help                         Show this help"
        print "exit                         Exits the DDBB"
        print

    def fetchExpl(self):
        # Exploits will be saved on inguma's directory under modules/expoits/

        # If milw0rm is selected as DDBB to retrieve...
        if self.remotedb == 'milw0rm':
            # Move to exploits directory
            try:
            	os.chdir(self.EXPLOITS_DIR)
            except(OSError):
            	os.mkdir(self.EXPLOITS_DIR)
            	os.chdir(self.EXPLOITS_DIR)
            print "Dir: ",self.EXPLOITS_DIR

            # if exploits dir exists, it's considered an update
            if os.path.exists(self.MILW0RM_DIR):
                print "milw0rm exploits already downloaded, checking for updates"
    
            # Fetching exploits from milw0rm
            page = "http://www.milw0rm.com/sploits/milw0rm.tar.bz2"
            print "Downloading ", page
            urllib.urlretrieve(page, "milw0rm.tar.bz2")
    
            # Extract exploits and remove original file
            print "Extracting files..."
            tar = tarfile.open("milw0rm.tar.bz2")
            tar.extractall()
            tar.close()
            os.remove("milw0rm.tar.bz2")

            # Let's store actual date
            os.chdir(self.MILW0RM_DIR)
            self.setDate()

            os.chdir(self.INGUMA_DIR)
            print "Operation Complete"
        # Else, if the DDBB is packetstorm...
        elif self.remotedb == 'packetstorm':
            # Move to exploits directory
            try:
            	os.chdir(self.PACKETSTORM_DIR)
            except(OSError):
            	os.mkdir(self.PACKETSTORM_DIR)
            	os.chdir(self.PACKETSTORM_DIR)
            print "Dir: ",self.PACKETSTORM_DIR

            for year in self.YEARS:
                # Only fetch if not already done
                PACKETSTORM_YEAR_DIR = self.PACKETSTORM_DIR+year+"-exploits"
                if not os.path.exists(PACKETSTORM_YEAR_DIR):
                    print "Start: 20"+year
                    try:
                        os.chdir(self.PACKETSTORM_DIR+year+"-exploits")
                    except(OSError):
                        os.mkdir(self.PACKETSTORM_DIR+year+"-exploits")
                        os.chdir(self.PACKETSTORM_DIR+year+"-exploits")
                    page = "http://packetstormsecurity.org/"+year+"12-exploits/20"+year+"-exploits.tgz"
                    print "Downloading: " + page + " ..."
                    urllib.urlretrieve(page, "20"+year+"-exploits.tgz")
                    print "Done. Extracting files..."

                    tar = tarfile.open("20"+year+"-exploits.tgz")
                    tar.extractall()
                    tar.close()

                    os.remove("20"+year+"-exploits.tgz")
                    print "Done: 20"+year
                else:
                    print "Skiping already downloaded exploits for year 20" + year

            # Let's store actual date
            os.chdir(self.PACKETSTORM_DIR)
            self.setDate()

            os.chdir(self.INGUMA_DIR)

    def setDate(self):
        """ Stores current date on a file """

        import time
        current_date = time.ctime(time.time())
        f = open('last_date.txt', 'w')
        f.write(current_date)
        f.close()
        print "Exploits successfully downloaded on", current_date

    def readDate(self, database):
        """ Reads last date of exploits download """

        if database == 'packetstorm':
            try:
                os.chdir(self.PACKETSTORM_DIR)
            except:
                print "Exploits from Packetstorm not yet downloaded"
                return False
        elif database == 'milw0rm':
            try:
                os.chdir(self.MILW0RM_DIR)
            except:
                print "Exploits from Milw0rm not yet downloaded"
                return False
        else:
            return False
        f = open('last_date.txt', 'r').read()
        os.chdir(self.INGUMA_DIR)
        return f

    def listExpl(self):
        """ Prints to stdout the exploits available """

        if self.remotedb == 'milw0rm':
            # Let's read the sploitlist.txt listing and output the contents
            f = open(self.EXPL_LIST, 'r').read()
            print f
        elif self.remotedb == 'packetstorm':
            # Lets list the exploits on the packetstorm directory
            import lib.scriptutil as su
            flist = su.ffind(self.PACKETSTORM_DIR)
            for x in flist:
                print x
        else:
            print "The remotedb has to be set to 'milw0rm' or 'packetstorm'"

    def searchExpl(self):
        """ Search on exploits list for the tag contents """

        # Check if self.tag has content
        if self.tag:
            print "Searching milw0rm local DDBB for tag:", self.tag
            f = open(self.EXPL_LIST, 'r').readlines()
            for line in f:
                if line.__contains__(self.tag):
                    print line
        else:
            print "tag variable is empty, use it to specify pattern to search"

    def correlate(self):
        """ Searches all exploits for each open port of a machine scanned """

        if self.target:
            targetPorts = self.target + '_ports'
            for port in self.user_data[targetPorts]:
                print "Searching exploits available on milw0rm DDBB for port TCP/" + str(port)
                print
                self.port = str(port)
                self.searchPort()

    def searchExplPacket(self):
        """ Search exploits on Packetstorm Local DDBB """
        if self.tag:
            import lib.scriptutil as su
            print "Searching packetstorm local DDBB for tag:", self.tag
            if self.searchYear:
                print "Searching on exploits of year 20" + self.searchYear
                searchDir = self.PACKETSTORM_DIR + self.searchYear + '-exploits/'
                flist = su.ffindgrep(searchDir, self.tag)
            else:
                flist = su.ffindgrep(self.PACKETSTORM_DIR, self.tag)
            for x in flist:
                print x
        else:
            print "tag variable is empty, use it to specify pattern to search"

    def searchPort(self):
        """ Search exploits based on remote port """
        if self.port:
            RPORT_DIR = self.MILW0RM_DIR + 'rport/' + self.port
            rportList = os.listdir(RPORT_DIR)
            for exploit in rportList:
                print RPORT_DIR +'/' + exploit
        else:
            print "port variable is empty"
            print "Define the port using for example 'port 22'"

    def showExpl(self):
        """ Prints to stdout selected exploit """
        if self.xplpath:
            f = open(self.xplpath, 'r').read()
            print f
        else:
            print "Select some exploit to show"
            print "Use, for example, 'xplpath ./modules/exploits/milw0rm/rport/22/1787.py'"

    def run(self):
        # Try to read last download date
        last_date = self.readDate(database='milw0rm')
        if last_date:
            print "Last Milw0rm DDBB update:", last_date
        last_date = self.readDate(database='packetstorm')
        if last_date:
            print "Last Packetstorm DDBB update:", last_date
        # Inform actual DDBB selected
        print
        print "Actual remotedb selected:", self.remotedb

        while 1:
            try:
                res = raw_input("LOCXPL> ")
            except KeyboardInterrupt:
                break
            except EOFError:
                break
            except:
                print "raw_input:", sys.exc_info()[1]
            
            words = res.split(" ")

            if len(words) == 1 and words[0] == "":
                continue
            elif words[0].lower() == "help":
                self.showHelp()
            elif words[0].lower() == "quit" or words[0].lower() == "exit":
                break
            elif words[0].lower() == "fetch":
                self.fetchExpl()
            elif words[0].lower() == "list":
                self.listExpl()
            elif words[0].lower() == "search":
                if self.remotedb == 'milw0rm':
                    self.searchExpl()
                elif self.remotedb == 'packetstorm':
                    self.searchYear = words[1]
                    self.searchExplPacket()
                else:
                    print "The remotedb has to be set to 'milw0rm' or 'packetstorm'"
            elif words[0].lower() == "rport":
                self.searchPort()
            elif words[0].lower() == "correlate":
                self.correlate()
            elif words[0].lower() == 'remotedb':
                self.remotedb = words[1]
                print "New remotedb selected: ", self.remotedb
            elif words[0].lower() == "show":
                self.showExpl()
            elif words[0].lower() == 'tag':
                self.tag = string.join(words[1:], ' ')
                print "New search tag: ", self.tag 
            elif words[0].lower() == 'port':
                self.port = words[1]
                print "New search port: ", self.port
            elif words[0].lower() == 'xplpath':
                self.xplpath = words[1]
                print self.xplpath, "set to show."
            elif words[0].lower() == 'years':
                self.YEARS = []
                for year in words[1:]:
                    self.YEARS.append(year)
                print "Years: ", self.YEARS
            elif words[0].lower() == 'target':
                self.target = words[1]
                print "Target set for correlation:", self.target
            else:
                print "Unknown command or options '" + str(res) + "'"

        return False

    def printSummary(self):
        print

