#!/usr/bin/python
"""
Module Local Exploits DDBB for Inguma
Copyright (c) 2009 Hugo Teso <hugo.teso@gmail.com>

License is GPL
"""

import urllib, tarfile, os
from lib.libexploit import CIngumaModule

name = "localxpl"
brief_description = "Module to fetch and explore exploits from many sources"
type = "exploit"

globals = ['remotedb', 'tag','xplpath']

class CLocalXpl(CIngumaModule):
    """Main class with run, help and summary methods"""

    remotedb = 'milw0rm'
    tag = 'Windows'
    port = ''
    xplpath = ''

    # Exploits will be saved on inguma's directory under modules/expoits/
    # unless changed on EXPLOITS_DIR variable
    INGUMA_DIR = os.getcwd()
    EXPLOITS_DIR = INGUMA_DIR + '/modules/exploits/'

    # Local milw0rm exploits directory
    MILW0RM_DIR = EXPLOITS_DIR + 'milw0rm/'
    # Local milw0rm exploits list
    EXPL_LIST = MILW0RM_DIR + 'sploitlist.txt'

    def showHelp(self):
        print 
        print "Inguma's Local Exploit DDBB Help"
        print "--------------------------------"
        print
        print "remotedb                     At this moment, just milw0rm"
        print "fetch                        Download exploits from remotedb"
        if os.path.exists(self.MILW0RM_DIR):
            print
            print "Manage DDBB commands"
            print "--------------------"
            print
            print "list                         Shows list of local exploits. VERY VERBOSE"
            print "search                       Search exploits; use the 'tag' variable"
            print "                             Example: to search for windows exploits"
            print "                             'tag Windows'"
            print "rport                        Shows exploits afecting a remote port"
            print "                             Define the port using command like 'port 22'"
            print "                             Port must be numeric: 22 intead of SSH"
            print "show                         Shows selected exploit source code"
            print "                             Select exploit using xplpath command:"
            print "                             'xplpath path/to/exploit'"
            print
        print "help                         Show this help"
        print "exit                         Exit from the sniffer"
        print

    def fetchExpl(self):
        # Exploits will be saved on inguma's directory under modules/expoits/
        # if exploits dir exists, it's considered an update
        if os.path.exists(self.MILW0RM_DIR):
            print "milw0rm exploits already downloaded, checking for updates"

        # Move to exploits directory
        try:
        	os.chdir(self.EXPLOITS_DIR)
        except(OSError):
        	os.mkdir(self.EXPLOITS__DIR)
        	os.chdir(self.EXPLOITS_DIR)
        print "Dir: ",self.EXPLOITS_DIR

        # Fetching exploits from milw0rm
        page = "http://www.milw0rm.com/sploits/milw0rm.tar.bz2"
        print "Downloading ", page
        urllib.urlretrieve(page, "milw0rm.tar.bz2")

        # Extract exploits and remove original file
        print "Extracting files..."
        tar = tarfile.open("milw0rm.tar.bz2")
        tar.extractall()
        tar.close()
        os.remove("milw0rm.tar.bz2")
        os.chdir(self.INGUMA_DIR)
        print "Operation Complete"

    def listExpl(self):
        """ Prints to stdout the exploits available """

        # Let's read the sploitlist.txt listing and output the contents
        f = open(self.EXPL_LIST, 'r').read()
        print f

    def searchExpl(self):
        """ Search on exploits list for the tag contents """

        # Check if self.tag has content
        if self.tag:
            f = open(self.EXPL_LIST, 'r').readlines()
            for line in f:
                if line.__contains__(self.tag):
                    print line
        else:
            print "tag variable is empty, use it to specify pattern to search"

    def searchPort(self):
        """ Search exploits based on remote port """
        if self.port:
            RPORT_DIR = self.MILW0RM_DIR + 'rport/' + self.port
            rportList = os.listdir(RPORT_DIR)
            for exploit in rportList:
                print RPORT_DIR +'/' + exploit
        else:
            print "port variable is empty"
            print "Define the port using for example 'port 22'"

    def showExpl(self):
        """ Prints to stdout selected exploit """
        if self.xplpath:
            f = open(self.xplpath, 'r').read()
            print f
        else:
            print "Select some exploit to show"
            print "Use, for example, 'xplpath ./modules/exploits/milw0rm/rport/22/1787.py'"

    def run(self):
        while 1:
            try:
                res = raw_input("LOCXPL> ")
            except KeyboardInterrupt:
                break
            except EOFError:
                break
            except:
                print "raw_input:", sys.exc_info()[1]
            
            words = res.split(" ")

            if len(words) == 1 and words[0] == "":
                continue
            elif words[0].lower() == "help":
                self.showHelp()
            elif words[0].lower() == "quit" or words[0].lower() == "exit":
                break
            elif words[0].lower() == "fetch":
                self.fetchExpl()
            elif words[0].lower() == "list":
                self.listExpl()
            elif words[0].lower() == "search":
                self.searchExpl()
            elif words[0].lower() == "rport":
                self.searchPort()
            elif words[0].lower() == "show":
                self.showExpl()
            elif words[0].lower() == 'tag':
                self.tag = words[1]
                print "New search tag: ", self.tag 
            elif words[0].lower() == 'port':
                self.port = words[1]
                print "New search port: ", self.port
            elif words[0].lower() == 'xplpath':
                self.xplpath = words[1]
                print self.xplpath, "set to show."
            else:
                print "Unknown command or options '" + str(res) + "'"

        return False

    def printSummary(self):
        print

